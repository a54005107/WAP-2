[{"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\index.js":"1","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\App.js":"2","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\Mypage.js":"3","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\party-list.js":"4","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\festival-list.js":"5","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\partyall-list.js":"6","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\Mainpage.js":"7","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\reviewPage.js":"8","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\partyPopup.js":"9","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\SignUp2.js":"10","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\partymake.js":"11","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\SignUp3.js":"12","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\my-party-list.js":"13","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\LoginForm.js":"14","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\festival-detail.js":"15","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\Maptest.js":"16","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\mypage-info.js":"17","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\Listpage.js":"18","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\PasswordChange.js":"19","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\carousel.js":"20","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\reviewImage.js":"21","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\FilterComponent.js":"22","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\ModalStyle.js":"23","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\login.js":"24","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\DetailInfo.js":"25","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\GuideInfo.js":"26","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\DropdownComponent.js":"27","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\MapInfo.js":"28","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\PhotoInfo.js":"29","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\PartyInfo.js":"30"},{"size":872,"mtime":1698581546627,"results":"31","hashOfConfig":"32"},{"size":1616,"mtime":1701237543315,"results":"33","hashOfConfig":"32"},{"size":2409,"mtime":1701193533443,"results":"34","hashOfConfig":"32"},{"size":3861,"mtime":1700822287397,"results":"35","hashOfConfig":"32"},{"size":1569,"mtime":1700658489078,"results":"36","hashOfConfig":"32"},{"size":10253,"mtime":1701256399449,"results":"37","hashOfConfig":"32"},{"size":1534,"mtime":1701197989983,"results":"38","hashOfConfig":"32"},{"size":4470,"mtime":1700655463297,"results":"39","hashOfConfig":"32"},{"size":18559,"mtime":1701109804336,"results":"40","hashOfConfig":"32"},{"size":6336,"mtime":1701180538440,"results":"41","hashOfConfig":"32"},{"size":13494,"mtime":1700658489097,"results":"42","hashOfConfig":"32"},{"size":4431,"mtime":1701180136227,"results":"43","hashOfConfig":"32"},{"size":10162,"mtime":1701253213705,"results":"44","hashOfConfig":"32"},{"size":6161,"mtime":1701234214344,"results":"45","hashOfConfig":"32"},{"size":6274,"mtime":1701105679348,"results":"46","hashOfConfig":"32"},{"size":1747,"mtime":1698581546701,"results":"47","hashOfConfig":"32"},{"size":3587,"mtime":1701174535562,"results":"48","hashOfConfig":"32"},{"size":1720,"mtime":1700629771058,"results":"49","hashOfConfig":"32"},{"size":6506,"mtime":1700658489060,"results":"50","hashOfConfig":"32"},{"size":13954,"mtime":1701103985590,"results":"51","hashOfConfig":"32"},{"size":1654,"mtime":1700485116509,"results":"52","hashOfConfig":"32"},{"size":1469,"mtime":1699955521889,"results":"53","hashOfConfig":"32"},{"size":662,"mtime":1700548206947,"results":"54","hashOfConfig":"32"},{"size":2439,"mtime":1700652387402,"results":"55","hashOfConfig":"32"},{"size":875,"mtime":1700485116357,"results":"56","hashOfConfig":"32"},{"size":1189,"mtime":1700485116370,"results":"57","hashOfConfig":"32"},{"size":2539,"mtime":1701149793986,"results":"58","hashOfConfig":"32"},{"size":288,"mtime":1698581546676,"results":"59","hashOfConfig":"32"},{"size":3598,"mtime":1698581546726,"results":"60","hashOfConfig":"32"},{"size":3720,"mtime":1700474737123,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"m93fa3",{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\index.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\App.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\Mypage.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\party-list.js",["167","168"],[],"// src/components/MapInfo.js\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport ListPage from './Listpage';\r\nimport FilterComponent from './FilterComponent';\r\nimport { Link } from 'react-router-dom';\r\nimport modalStyles from './ModalStyle'; // 스타일 파일 import\r\n\r\n// // 공통 스타일을 정의한 styled-components\r\nconst StyledDiv = styled.div`\r\npadding-left: 15px; /* padding 추가 */\r\npadding-right: 15px; /* padding 추가 */\r\n`;\r\n\r\n\r\nconst data = [\r\n    { id: 1, title: '품목 1', date: '2023-11-13' },\r\n    { id: 2, title: '품목 2', date: '2023-11-14' },\r\n    { id: 3, title: '품목 3', date: '2023-11-15' },\r\n    { id: 4, title: '품목 4', date: '2023-11-16' },\r\n    { id: 5, title: '품목 5', date: '2023-11-17' },\r\n    { id: 6, title: '품목 6', date: '2023-11-18' },\r\n    { id: 1, title: '품목 1', date: '2023-11-13' },\r\n    { id: 2, title: '품목 2', date: '2023-11-14' },\r\n    { id: 3, title: '품목 3', date: '2023-11-15' },\r\n    { id: 4, title: '품목 4', date: '2023-11-16' },\r\n    { id: 5, title: '품목 5', date: '2023-11-17' },\r\n    { id: 6, title: '품목 6', date: '2023-11-18' },\r\n    { id: 1, title: '품목 1', date: '2023-11-13' },\r\n    { id: 2, title: '품목 2', date: '2023-11-14' },\r\n    { id: 3, title: '품목 3', date: '2023-11-15' },\r\n    { id: 4, title: '품목 4', date: '2023-11-16' },\r\n    { id: 5, title: '품목 5', date: '2023-11-17' },\r\n    { id: 6, title: '품목 8', date: '2023-11-18' },\r\n\r\n  ];\r\n\r\nconst PartyList= () => {\r\n\r\n    \r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const itemsPerPage = 4;\r\n    const totalPages = Math.ceil(data.length / itemsPerPage);\r\n\r\n    \r\n    const handleClick = (page) => {\r\n        setCurrentPage(page);\r\n    };\r\n\r\n\r\n        const handlePrevClick = () => {\r\n            setCurrentPage((prev) => prev - 1);\r\n        };\r\n\r\n        const handleNextClick = () => {\r\n            setCurrentPage((prev) => prev + 1);\r\n        };\r\n\r\n        const startIndex = (currentPage - 1) * itemsPerPage;\r\n        const endIndex = startIndex + itemsPerPage;\r\n        const currentItems = data.slice(startIndex, endIndex);\r\n\r\n\r\n    return (\r\n    <div>\r\n        <h2 style={{display:'flex',justifyContent:'center'}}>2023 부산 광안리 불꽃 축제</h2>\r\n\r\n        <div>\r\n            <Link to=\"/partymake\"><button style={modalStyles.writeButton}>글쓰기</button></Link>\r\n            <FilterComponent />\r\n            \r\n            <br></br><br></br><br></br><br></br><br></br><br></br>\r\n            <ListPage/>\r\n                <div style={{marginBottom: '20px', position: 'fixed', bottom: 0, display: 'flex', justifyContent: 'center', width: '100%' }}>\r\n                    <div style={{ display: 'flex' }}>\r\n                        <button onClick={handlePrevClick} disabled={currentPage === 1}>\r\n                            {'<'}\r\n                        </button>\r\n                        {Array.from({ length: totalPages }, (_, index) => index + 1).map(\r\n                            (page) => (\r\n                                <button\r\n                                key={page}\r\n                                onClick={() => handleClick(page)}\r\n                                disabled={page === currentPage}\r\n                                style={{ margin: '0 10px', color: page === currentPage ? '#488AEE' : 'black' }}\r\n                            >\r\n                                {page}\r\n                            </button>\r\n                            )\r\n                        )}\r\n                        <button onClick={handleNextClick} disabled={currentPage === totalPages}>\r\n                            {'>'}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    </div>\r\n    \r\n    );\r\n};\r\n\r\nexport default PartyList;","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\festival-list.js",["169"],[],"// import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n\r\nconst MyLink = styled(Link)`\r\ntext-decoration: none;\r\ncolor: inherit;\r\npadding: 5px 10px;\r\nmargin-left: 5px;\r\ndisplay: inline-block;\r\ntransition: background-color 0.3s ease-in-out;\r\n\r\nfont-size: 13px; /* 글자 크기 지정 */\r\nfont-weight: 400; /* 글자 두께 지정 */\r\n\r\n`;\r\n\r\n\r\nconst FestivalList = () => {\r\n\r\nconst [userDataArray, setUserDataArray] = useState([]);\r\n\r\nuseEffect(() => {\r\nconst fetchData = () => {\r\n    fetch('https://cors-anywhere.herokuapp.com/https://port-0-buife-5mk12alp6foaqx.sel5.cloudtype.app/members')\r\n    .then(response => {\r\n        if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n    })\r\n    .then(data => {\r\n        setUserDataArray(data); // 전체 데이터 배열을 가져옴\r\n    })\r\n    .catch(error => {\r\n        console.error('Error fetching user data:', error);\r\n    });\r\n};\r\n\r\nfetchData();\r\n}, []);\r\n\r\nreturn (\r\n<div>\r\n    {userDataArray.length > 0 ? (\r\n    <div>\r\n        <h2>User Information</h2>\r\n        {userDataArray.map((userData, index) => (\r\n        <div key={index}>\r\n            <p>User ID: {userData.userID}</p>\r\n            {/* 기타 필요한 정보도 여기에 추가할 수 있습니다 */}\r\n        </div>\r\n        ))}\r\n    </div>\r\n    ) : (\r\n    <p>Loading user information...</p>\r\n    )}\r\n</div>\r\n);\r\n};\r\n\r\n\r\n\r\nexport default FestivalList;\r\n","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\partyall-list.js",["170","171"],[],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport PartyPopup from './partyPopup';\r\nimport { Link } from 'react-router-dom';\r\nimport modalStyles from './ModalStyle'; // 스타일 파일 import\r\n\r\nconst Header = styled.header`\r\nbackground-color: #488AEE;\r\n// padding: 5px;\r\nheight: 130px;\r\ntext-align: center;\r\njustify-content: center;\r\n`;\r\n\r\nconst Logoimg = styled.img`\r\n// padding: 10px;\r\nheight: 110px;\r\ntext-align: center;\r\ndisplay: inline-block;\r\ncursor: pointer; /* 커서를 포인터로 변경하여 클릭 가능하게 함 */\r\n`;\r\n\r\nconst Linkdiv = styled.div`\r\nbackground-color: #488AEE;\r\ntext-decoration: none;\r\ncolor: inherit;\r\ntext-align: right;\r\ntransition: background-color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\ntext-decoration: none;\r\ncolor: inherit;\r\nbackground-color: lightGray;\r\npadding: 5px 10px;\r\nmargin-right: 15px;\r\nmargin-top: 10px;\r\nborder: none; /* 테두리 제거 */\r\nborder-radius: 13px;\r\ndisplay: inline-block;\r\ncursor: pointer;\r\ntransition: background-color 0.3s ease-in-out;\r\n\r\nfont-size: 13px; /* 글자 크기 지정 */\r\nfont-weight: 400; /* 글자 두께 지정 */\r\n`;\r\n\r\nconst Headerlist = styled.div`\r\nbackground-color: #488AEE;\r\ntext-align: right;\r\npadding-bottom: 5px;\r\npadding-right: 10px;\r\n`;\r\n\r\nconst MyLink = styled(Link)`\r\ntext-decoration: none;\r\ncolor: inherit;\r\npadding: 5px 10px;\r\nmargin-left: 5px;\r\ndisplay: inline-block;\r\ntransition: background-color 0.3s ease-in-out;\r\n\r\nfont-size: 13px; /* 글자 크기 지정 */\r\nfont-weight: 400; /* 글자 두께 지정 */\r\n\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  left: -500px;\r\n  margin-top:40px;\r\n`;\r\n\r\nconst DropdownContainer = styled.div`\r\n  position: absolute;\r\n  top:30px;\r\n  left: calc(50% - 600px); /* 중간에서 왼쪽으로 이동 */\r\n`;\r\n\r\nconst Dropdown = styled.div`\r\n  border: 3px solid #ccc;\r\n  border-radius: 20px;\r\n  padding: 8px;\r\n  cursor: pointer;\r\n  width: 100px;\r\n  text-align: center;\r\n`;\r\n\r\nconst DropdownMenu = styled.div`\r\n  display: ${(props) => (props.isOpen ? 'block' : 'none')};\r\n  position: absolute;\r\n  background-color: #fff;\r\n  border: 3px solid #ccc;\r\n  border-radius: 10px;\r\n  width: 100px;\r\n  max-height: 200px; /* 최대 높이 설정 */\r\n  overflow-y: auto; /* 세로 스크롤이 필요한 경우 스크롤 표시 */\r\n  z-index: 1;\r\n`;\r\n\r\nconst DropdownItem = styled.div`\r\n  padding: 5px;\r\n  cursor: pointer;\r\n`;\r\n\r\n//partyall-list container\r\nconst Container = styled.div`\r\n  position: relative;\r\n  height: 70vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst RoundedBox = styled.div`\r\n  border-radius: 80px;\r\n  border: 3px solid #ccc;\r\n  padding: 10px;\r\n  margin-right: 40px;\r\n  margin-top:100px;\r\n  width: 270px;\r\n  height: 350px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst RoundedBox1 = styled.div`\r\n  border-radius: 80px;\r\n  border:none\r\n  padding: 10px;\r\n  margin-bottom:10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin:px;\r\n  width:70px;\r\n  height:30px;\r\n  display:flex;\r\n  background-color:#E3E3E3\r\n`;\r\n\r\nconst HorizontalLine = styled.hr`\r\n    width: 90%;\r\n  height: 2px;\r\n  background-color:black;\r\n  margin:0px;\r\n`;\r\n\r\nconst PaginationContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: auto; /* 페이지네이션을 컨테이너의 아래로 밀어냅니다. */\r\n  margin-bottom: 20px; \r\n`;\r\nconst FestName = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: auto; /* 아래로 밀어냅니다. */\r\n  margin-bottom: 20px; \r\n`;\r\nconst FestEnd = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: auto; /* 아래로 밀어냅니다. */\r\n  margin-bottom: 20px; \r\n`;\r\nconst PartyDetail = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: auto; /* 아래로 밀어냅니다. */\r\n  margin-bottom: 20px; \r\n`;\r\n\r\n\r\nconst PartyAllList= () => {\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    const [selectedParty, setSelectedParty] = useState(null);\r\n\r\n \r\n    const [partiesData, setPartiesData] = useState([]);\r\n\r\n    const partiesPerPage = 4; // 한 페이지에 보여줄 파티 수\r\n    const totalPages = 5; // 전체 페이지 수\r\n\r\n  const fetchData = async (page) => {\r\n      try {\r\n        const response = await fetch(`https://port-0-server-cloudtype-4fju66f2clmyxbee6.sel5.cloudtype.app/party?page=${page}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          credentials: 'include',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('서버 응답이 실패했습니다.');\r\n        }\r\n\r\n        const data = await response.json();\r\n        setPartiesData(data); // 현재 페이지에 해당하는 파티 목록으로 업데이트\r\n      } catch (error) {\r\n        console.error('파티 목록을 불러오는데 실패했습니다:', error);\r\n      }\r\n    };\r\n\r\n    useEffect(() => {\r\n      // 페이지 로드 시 첫 번째 페이지의 파티 목록 가져오기\r\n      fetchData(1);\r\n    }, []);\r\n    \r\n    \r\n      //파티팝업창\r\n      const handlePartyClick = (party) => {\r\n        setSelectedParty(party);\r\n        setShowPopup(true);\r\n      };\r\n    \r\n      const closePopup = () => {\r\n        setShowPopup(false);\r\n      };\r\n    \r\n\r\n      //페이지네이션 기능\r\n\r\n      const [currentPage, setCurrentPage] = useState(1);\r\n    \r\n      const indexOfLastParty = currentPage * partiesPerPage;\r\n      const indexOfFirstParty = indexOfLastParty - partiesPerPage;\r\n      const currentParties = partiesData.slice(indexOfFirstParty, indexOfLastParty);\r\n    \r\n      const handlePageChange = (pageNumber) => {\r\n        fetchData(pageNumber);\r\n        setCurrentPage(pageNumber);\r\n      };\r\n    \r\n      const handlePrevPage = () => {\r\n        if (currentPage > 1) {\r\n          setCurrentPage(currentPage - 1);\r\n        }\r\n      };\r\n    \r\n      const handleNextPage = () => {\r\n        const totalPages = Math.ceil(partiesData.length / partiesPerPage);\r\n        if (currentPage < totalPages) {\r\n          setCurrentPage(currentPage + 1);\r\n\r\n        }\r\n      };\r\n\r\n\r\n\r\n      \r\n      // 드롭다운 기능\r\n      const [isOpen, setIsOpen] = useState(false);\r\n      const [selectedLocation, setSelectedLocation] = useState('전체');\r\n    \r\n      const locations = ['전체','남구', '수영구', '부산진구', '동래구','북구','금정구','연제구','사상구','강서구','서구','동구','중구','사하구','영도구','해운대구','기장군'];\r\n    \r\n      const handleToggleDropdown = () => {\r\n        setIsOpen(!isOpen);\r\n      };\r\n    \r\n      const handleLocationSelect = (location) => {\r\n        setSelectedLocation(location);\r\n        setIsOpen(false);\r\n      };\r\n\r\n      //선택한 지역구에 따라 파티 필터링\r\n\r\n    const filteredParties = selectedLocation !== '전체' \r\n    ? partiesData.filter(party => party.festAddress === selectedLocation) \r\n    : partiesData;\r\n    \r\n    return (\r\n    <div>\r\n\r\n        <div>\r\n            <Linkdiv>\r\n                <StyledButton>로그아웃</StyledButton>\r\n                </Linkdiv>\r\n            <Header>\r\n            <Link to=\"/.\"> {/* 메인화면으로 이동 */}\r\n                <Logoimg src=\"info.png\" alt=\"Logo\" />\r\n            </Link>\r\n                <Headerlist>\r\n                \r\n                <MyLink to =\"/festival-list\">축제 목록</MyLink>\r\n                <MyLink to =\"/partyall-list\">전체 파티 목록</MyLink>\r\n                <MyLink to =\"/my-party-list\">내 파티</MyLink>\r\n                </Headerlist>\r\n            </Header>\r\n        <Title>전체 파티 목록</Title>\r\n\r\n        <Container>\r\n\r\n        <DropdownContainer>\r\n                <Dropdown onClick={handleToggleDropdown}>\r\n                {selectedLocation}\r\n                <DropdownMenu isOpen={isOpen}>\r\n                {locations.map((location) => (\r\n                    <DropdownItem key={location} onClick={() => handleLocationSelect(location)}>\r\n                    {location}\r\n                    </DropdownItem>\r\n                ))}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        </DropdownContainer>\r\n\r\n            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n             {filteredParties.map((party) => (\r\n             <RoundedBox key={party.partyPk} onClick={() => handlePartyClick(party)}>\r\n                    <FestName style={{fontSize:\"22px\"}}>{party.festName}</FestName>\r\n\r\n                    <RoundedBox1 >\r\n                     <p style={{margin:'0',fontSize:'15px' ,color:'#676767'}}>{party.festAddress}</p>\r\n                    </RoundedBox1>\r\n\r\n                    <HorizontalLine />\r\n                    \r\n                    <p style={{fontSize:\"20px\"}}>\r\n                        {party.partyName}</p>\r\n                    <PartyDetail>{party.partyDetail}</PartyDetail>\r\n                    <FestEnd style={{color:'#676767'}}>{party.festEnd}</FestEnd>\r\n\r\n            </RoundedBox>\r\n                ))}\r\n                </div>\r\n\r\n                            {showPopup && (\r\n                    <PartyPopup party={selectedParty} onClose={closePopup} />\r\n                )}\r\n\r\n                <PaginationContainer>\r\n                    <button onClick={handlePrevPage} style={{fontSize:'20px'}}>{'< '}</button>\r\n\r\n                    {Array.from({ length: Math.min(6, totalPages) }, (_, index) => (\r\n                    <button key={index + 1} style={{fontSize:'20px'}} onClick={() => handlePageChange(index + 1)}>\r\n                        {index + 1}\r\n                    </button>\r\n                    ))}\r\n                    <button onClick={handleNextPage} style={{fontSize:'20px'}}>{' >'}</button>\r\n                </PaginationContainer>\r\n                \r\n                </Container>\r\n            </div>\r\n    </div>\r\n    \r\n    );\r\n};\r\n\r\nexport default PartyAllList;","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\Mainpage.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\reviewPage.js",["172"],[],"// import React from 'react';\r\nimport styled from 'styled-components';\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport ReviewImage from './reviewImage';\r\n\r\n\r\nconst Mybutton = styled.button`\r\npadding: 3px 8px 3px 8px;\r\nmargin: 3px;\r\nmargin-bottom: 13px;\r\nfont-size: 15px;\r\nborder: 1px solid gray;\r\nborder-radius: 13px;\r\nbackground-color: #F1F1F1;\r\ncolor: #488AEE;\r\ncursor: pointer;\r\ntransition: opacity 0.3s ease;\r\n&:hover {\r\nopacity: 0.8;\r\n}\r\n`;\r\nconst Divider = styled.div`\r\nborder-bottom: 1px solid #ccc;\r\nmargin: 20px 0;\r\n`;\r\nconst Header = styled.header`\r\nbackground-color: #488AEE;\r\n// padding: 5px;\r\nheight: 130px;\r\ntext-align: center;\r\njustify-content: center;\r\n`;\r\n\r\nconst Logoimg = styled.img`\r\n// padding: 10px;\r\nheight: 110px;\r\ntext-align: center;\r\ndisplay: inline-block;\r\ncursor: pointer; /* 커서를 포인터로 변경하여 클릭 가능하게 함 */\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\ntext-decoration: none;\r\ncolor: inherit;\r\nbackground-color: lightGray;\r\npadding: 5px 10px;\r\nmargin-right: 15px;\r\nmargin-top: 10px;\r\nborder: none; /* 테두리 제거 */\r\nborder-radius: 13px;\r\ndisplay: inline-block;\r\ncursor: pointer;\r\ntransition: background-color 0.3s ease-in-out;\r\n\r\nfont-size: 13px; /* 글자 크기 지정 */\r\nfont-weight: 400; /* 글자 두께 지정 */\r\n`;\r\n\r\nconst Linkdiv = styled.div`\r\nbackground-color: #488AEE;\r\ntext-decoration: none;\r\ncolor: inherit;\r\ntext-align: right;\r\ntransition: background-color 0.3s ease-in-out;\r\n`;\r\n\r\nconst MyLink = styled(Link)`\r\ntext-decoration: none;\r\ncolor: inherit;\r\npadding: 5px 10px;\r\nmargin-left: 5px;\r\ndisplay: inline-block;\r\ntransition: background-color 0.3s ease-in-out;\r\n\r\nfont-size: 13px; /* 글자 크기 지정 */\r\nfont-weight: 400; /* 글자 두께 지정 */\r\n\r\n`;\r\n\r\nconst Headerlist = styled.div`\r\nbackground-color: #488AEE;\r\ntext-align: right;\r\npadding-bottom: 5px;\r\npadding-right: 10px;\r\n`;\r\n\r\n\r\nconst ImageContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Reviewdiv = styled.div`\r\n    text-align: center;\r\n    padding: 30px;\r\n`;\r\n\r\nconst ReviewPage = () => {\r\n    const [partyData, setPartyData] = useState({\r\n        hostNickname: '주인장',\r\n        festivalName: '2023 광안리 불꽃축제',\r\n        partyCurrent: [\r\n            { id: 'id01', district: '남구', manner: '36.5' },\r\n            { id: 'id02', district: '동구', manner: '70' },\r\n            { id: 'id03', district: '북구', manner: '20' },\r\n        ],\r\n    });\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const handleReviewSubmit = () => {\r\n            alert('리뷰 작성이 완료되었습니다.');\r\n            navigate('/party-list');\r\n        };\r\n\r\n    return (\r\n        <div>\r\n            <Linkdiv>\r\n                <StyledButton>로그아웃</StyledButton>\r\n            </Linkdiv>\r\n            <Header>\r\n                <Link to=\"/.\"> {/* 메인화면으로 이동 */}\r\n                    <Logoimg src=\"info.png\" alt=\"Logo\" />\r\n                </Link>\r\n                <Headerlist>\r\n                    <MyLink to=\"/festival-list\">축제 목록</MyLink>\r\n                    <MyLink to=\"/party-list\">전체 파티 목록</MyLink>\r\n                    <MyLink to=\"/my-party-list\">내 파티</MyLink>\r\n                </Headerlist>\r\n            </Header>\r\n\r\n            {/* 리뷰 작성 폼 */}\r\n            <Reviewdiv>\r\n                <h3>{partyData.hostNickname} 님과 함께한 파티는 어떠셨나요?</h3>\r\n                <p>축제이름 : {partyData.festivalName}</p>\r\n                \r\n                {/* <p>\r\n                    {partyData.partyCurrent.map((participant) => (\r\n                        <span key={participant.id}>\r\n                            {participant.id} 님과 함께한 파티는 어떠셨나요?{' '}\r\n                        </span>\r\n                    ))}\r\n                </p> */}\r\n                <Divider />\r\n                <p>매너온도를 등록해 주세요! 백경이를 클릭하면 별점이 매겨집니다.</p>\r\n            </Reviewdiv>\r\n\r\n            <ImageContainer>\r\n                        <ReviewImage />\r\n                </ImageContainer>\r\n            <div style={{ justifyContent: 'center', display: 'flex' }}>\r\n                <Mybutton onClick={handleReviewSubmit}>리뷰 작성 완료</Mybutton>\r\n\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReviewPage;\r\n\r\n","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\partyPopup.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\SignUp2.js",["173"],[],"import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport DropdownComponent from './DropdownComponent';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background-color: #488aee; /* 배경색 설정 */\r\n  padding: 20px; /* 적절한 패딩 추가 */\r\n  min-height: 100vh;\r\n`;\r\n\r\nconst LogoImage = styled.img`\r\n  width: 300px; /* 큰 로고 크기 */\r\n  height: auto;\r\n  margin-top: 0px;\r\n  margin-bottom: 0px;\r\n  \r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  \r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 300px;\r\n  height: 40px;\r\n  margin-bottom: 20px;\r\n  padding: 10px;\r\n  border-radius: 200px;\r\n  margin-top:20px;\r\n  border:none;\r\n  box-shadow: 0px 0px 15px 0px rgba(0,0,0,0.2);\r\n`;\r\n\r\n\r\nconst RoundedBox = styled.div`\r\n  border-radius: 200px;\r\n  width:700px;\r\n  height:800px;\r\n  padding: 70px;\r\n  background-color: #91B9F5; /* 배경색 설정 */\r\n  box-shadow: 0px 0px 15px 0px rgba(0,0,0,0.2); /* 그림자 효과 */\r\n  margin-top: 50px;\r\n`;\r\nconst NextButton = styled.button`\r\ndisplay: block;\r\nwidth: 200px; /* 버튼이 컨테이너의 가로 길이를 가지도록 함 */\r\nbackground-color: #0066ff;\r\ncolor: white;\r\nborder: none;\r\nborder-radius: 200px;\r\npadding: 10px 20px;\r\nfont-size: 16px;\r\ncursor: pointer;\r\nbox-shadow: 0px 0px 15px 0px rgba(0,0,0,0.2);\r\nmargin-top:10px;\r\n`;\r\n\r\nconst BackButton = styled.button`\r\ndisplay: block;\r\nwidth: 200px; /* 버튼이 컨테이너의 가로 길이를 가지도록 함 */\r\nbackground-color: #0066ff;\r\ncolor: white;\r\nborder: none;\r\nborder-radius: 200px;\r\npadding: 10px 20px;\r\nfont-size: 16px;\r\ncursor: pointer;\r\nbox-shadow: 0px 0px 15px 0px rgba(0,0,0,0.2);\r\nmargin-top:20px;\r\n`;\r\n\r\n\r\n\r\nconst logobuife = '/info.png';\r\n\r\nconst GenderSelector = ({ setUserGender }) => {\r\n  const [selectedGender, setSelectedGender] = useState('Male'); // 초기값: Male\r\n\r\n  const handleGenderChange = (e) => {\r\n    setSelectedGender(e.target.value);\r\n    setUserGender(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label>\r\n        남성\r\n        <input\r\n          type=\"radio\"\r\n          value=\"Male\"\r\n          checked={selectedGender === 'Male'}\r\n          onChange={handleGenderChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        여성\r\n        <input\r\n          type=\"radio\"\r\n          value=\"Female\"\r\n          checked={selectedGender === 'Female'}\r\n          onChange={handleGenderChange}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SignUp2=()=> {\r\n  const [userID, setUserID] = useState('');\r\n  const [userPW, setUserPW] = useState('');\r\n  const [userPWCheck,setUserPWCheck] = useState('');\r\n  const [userBirth, setUserBirth] = useState('');\r\n  const [userName, setUserName] = useState('');\r\n  const [userGender, setUserGender] = useState('Male');\r\n\r\n  const handleDateSelection = (year, month, day) => {\r\n    // 여기서 year, month, day는 DropdownComponent에서 선택된 값들입니다.\r\n    const formattedDate = `${year}-${month}-${day}`;\r\n    setUserBirth(formattedDate);\r\n  };\r\n\r\n  // API로 데이터 전송할 때 userBirth 사용\r\n  const handleSubmit = async () => {\r\n    // ...\r\n      \r\n    try{\r\n      const data = {\r\n        userID: userID,\r\n        userPW: userPW,\r\n        userPWCheck: userPWCheck,\r\n        userName: userName,\r\n        userBirth: userBirth,\r\n        userGender: userGender,\r\n      };\r\n\r\n          \r\n      const response = await fetch('https://port-0-server-cloudtype-4fju66f2clmyxbee6.sel5.cloudtype.app/members/new', {\r\n        method: 'POST',\r\n        credentials : 'include',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      console.log(data)\r\n      if (response.ok) {\r\n        // 성공적으로 응답을 받은 경우\r\n        // 여기에서 페이지 이동 등을 수행할 수 있습니다.\r\n      } else {\r\n        // 응답이 실패한 경우\r\n        throw new Error('회원가입에 실패했습니다.');\r\n      }\r\n    } catch (error) {\r\n\r\n      alert(error.message);\r\n      \r\n    }\r\n  };\r\n\r\n return (\r\n   <div className=\"App\">\r\n     <div className=\"mainpage\">\r\n       \r\n       <div className=\"mainbox\">\r\n        <Container>\r\n          <RoundedBox>\r\n            <Link to=\"/.\">\r\n            <LogoImage src={logobuife} alt=\"Buife 로고\" />\r\n          </Link>\r\n\r\n            <InputContainer>\r\n              <Input \r\n                type=\"text\" \r\n                placeholder=\"닉네임\" \r\n                value={userName}\r\n                onChange={(e)=> setUserName(e.target.value)}\r\n              />\r\n                  \r\n              <DropdownComponent onDateSelected={handleDateSelection}/>\r\n                          \r\n              <Input type=\"text\" \r\n              placeholder=\"이메일\"  \r\n              value={userID}\r\n              onChange={(e) => setUserID(e.target.value)}\r\n              />\r\n\r\n              <Input \r\n              type=\"password\" \r\n              placeholder=\"비밀번호\" \r\n              value={userPW}\r\n              onChange={(e)=> setUserPW(e.target.value)}\r\n              />\r\n\r\n              <Input \r\n              type=\"password\" \r\n              placeholder=\"비밀번호 확인\"\r\n              value={userPWCheck}\r\n              onChange={(e)=>setUserPWCheck(e.target.value)} \r\n              />\r\n                  \r\n                  <GenderSelector setUserGender={setUserGender} />\r\n                \r\n                <Link to={{ pathname: \"/signup3\", state: { userID: userID } }}>\r\n                  <NextButton \r\n                  type=\"button\" \r\n                  className=\"nextButton\"\r\n                  onClick={handleSubmit}\r\n                  >다음 페이지</NextButton>\r\n                </Link>\r\n\r\n                <Link to=\"/loginform\">\r\n                    <BackButton type=\"button\"\r\n                    className=\"backButton\">뒤로가기\r\n                    </BackButton>\r\n                </Link>\r\n\r\n\r\n        \r\n            </InputContainer>\r\n        \r\n\r\n              \r\n          </RoundedBox>\r\n         </Container>\r\n       </div>\r\n     </div>\r\n   </div>\r\n );\r\n}\r\n\r\n\r\n\r\nexport default SignUp2;","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\partymake.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\SignUp3.js",["174"],[],"import React, { useState } from 'react';\r\nimport { Navigate } from 'react-router';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background-color: #488aee; /* 배경색 설정 */\r\n  padding: 20px; /* 적절한 패딩 추가 */\r\n  min-height: 100vh;\r\n  \r\n`;\r\n\r\nconst LogoImage = styled.img`\r\n  width: 400px; /* 큰 로고 크기 */\r\n  height: auto;\r\n  margin-top: 0px;\r\n  margin-bottom: 0px;\r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  \r\n`;\r\n\r\nconst Input = styled.input`\r\n\r\n  width: 300px;\r\n  height: 40px;\r\n  margin-bottom: 30px;\r\n  margin-top: 30px;\r\n  padding: 10px;\r\n  border-radius: 200px;\r\n  border: none;\r\n  box-shadow: 0px 0px 15px 0px rgba(0,0,0,0.4);\r\n  \r\n`;\r\n\r\n\r\nconst RoundedBox = styled.div`\r\n  border-radius: 200px;\r\n  width:700px;\r\n  height:800px;\r\n  padding: 70px;\r\n  background-color: #91B9F5; /* 배경색 설정 */\r\n  box-shadow: 0px 0px 15px 0px rgba(0,0,0,0.2); /* 그림자 효과 */\r\n  margin-top: 50px;\r\n  \r\n`;\r\nconst SignUpButton = styled.button`\r\ndisplay: block;\r\nwidth: 200px; /* 버튼이 컨테이너의 가로 길이를 가지도록 함 */\r\nbackground-color: #0066ff;\r\ncolor: white;\r\nborder: none;\r\nborder-radius: 200px;\r\npadding: 10px 20px;\r\nfont-size: 16px;\r\ncursor: pointer;\r\nbox-shadow: 0px 0px 15px 0px rgba(0,0,0,0.2);\r\nmargin-top:20px;\r\n`;\r\n\r\nconst BackButton = styled.button`\r\ndisplay: block;\r\nwidth: 200px; /* 버튼이 컨테이너의 가로 길이를 가지도록 함 */\r\nbackground-color: #0066ff;\r\ncolor: white;\r\nborder: none;\r\nborder-radius: 200px;\r\npadding: 10px 20px;\r\nfont-size: 16px;\r\ncursor: pointer;\r\nbox-shadow: 0px 0px 15px 0px rgba(0,0,0,0.2);\r\nmargin-top:20px;\r\n`;\r\n\r\n\r\n\r\nconst logobuife = '/info.png';\r\n\r\n\r\nconst SignUp3 =()=> {\r\n  const location = useLocation();\r\n  const userID = location.state?.userID || '';\r\n  const [code, setCode] = useState('');\r\n\r\n  \r\n  const handleSubmit = async () => {\r\n    try {\r\n\r\n      \r\n      const params = new URLSearchParams();\r\n      params.append('code', code);\r\n\r\n\r\n      const requestOptions = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n \r\n        },\r\n        credentials : 'include',\r\n        body: params.toString(),\r\n      };\r\n   \r\n  \r\n\r\n      const response = await fetch('https://port-0-server-cloudtype-4fju66f2clmyxbee6.sel5.cloudtype.app/members/new/emailCheck', requestOptions);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('서버 응답이 실패했습니다🔐.');\r\n      }\r\n\r\n      const data = await response.text();\r\n      window.location.href = '/loginform'; // URL 변경 // 로그인이 성공했을 때의 로직\r\n       console.log(data); // 서버에서 받은 데이터 확인\r\n\r\n       //로그인이 성공하면 다음페이지로 이동 \r\n    } catch (error) {\r\n      console.error('회원가입 실패:', error);\r\n \r\n      // 로그인 실패 시의 처리 로직을 추가하세요\r\n    }\r\n  };\r\n \r\n return (\r\n   <div className=\"App\">\r\n     <div className=\"mainpage\">\r\n       \r\n       <div className=\"mainbox\">\r\n        <Container>\r\n          <RoundedBox>\r\n          <Link to=\"/.\">\r\n            <LogoImage src={logobuife} alt=\"Buife 로고\" />\r\n          </Link>\r\n\r\n        \r\n            <InputContainer>\r\n\r\n            <p>인증번호가 {userID}으로 전송되었습니다. 인증번호 8자리를 아래에 입력해주세요.</p>\r\n            <Input\r\n             type=\"text\" \r\n             placeholder=\"인증번호 입력\"\r\n             onChange={(e) => setCode(e.target.value)}\r\n            />\r\n\r\n                    <SignUpButton \r\n                    type=\"button\"\r\n                    className=\"signupButton\"\r\n                    onClick={handleSubmit}\r\n                    >회원가입\r\n                    </SignUpButton>\r\n                    \r\n                    <Link to=\"/signup2\">\r\n                    <BackButton type=\"button\"\r\n                    className=\"BackButton\">뒤로가기\r\n                    </BackButton>\r\n                    </Link>\r\n\r\n            </InputContainer>\r\n        \r\n          </RoundedBox>\r\n         </Container>\r\n       </div>\r\n     </div>\r\n   </div>\r\n );\r\n}\r\n\r\n\r\n\r\nexport default SignUp3;","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\my-party-list.js",["175","176"],[],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport PartyPopup from './partyPopup';\r\nimport { Link } from 'react-router-dom';\r\nimport modalStyles from './ModalStyle'; // 스타일 파일 import\r\n\r\nconst Header = styled.header`\r\nbackground-color: #488AEE;\r\n// padding: 5px;\r\nheight: 130px;\r\ntext-align: center;\r\njustify-content: center;\r\n`;\r\n\r\nconst Logoimg = styled.img`\r\n// padding: 10px;\r\nheight: 110px;\r\ntext-align: center;\r\ndisplay: inline-block;\r\ncursor: pointer; /* 커서를 포인터로 변경하여 클릭 가능하게 함 */\r\n`;\r\n\r\nconst Linkdiv = styled.div`\r\nbackground-color: #488AEE;\r\ntext-decoration: none;\r\ncolor: inherit;\r\ntext-align: right;\r\ntransition: background-color 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\ntext-decoration: none;\r\ncolor: inherit;\r\nbackground-color: lightGray;\r\npadding: 5px 10px;\r\nmargin-right: 15px;\r\nmargin-top: 10px;\r\nborder: none; /* 테두리 제거 */\r\nborder-radius: 13px;\r\ndisplay: inline-block;\r\ncursor: pointer;\r\ntransition: background-color 0.3s ease-in-out;\r\n\r\nfont-size: 13px; /* 글자 크기 지정 */\r\nfont-weight: 400; /* 글자 두께 지정 */\r\n`;\r\n\r\nconst Headerlist = styled.div`\r\nbackground-color: #488AEE;\r\ntext-align: right;\r\npadding-bottom: 5px;\r\npadding-right: 10px;\r\n`;\r\n\r\nconst MyLink = styled(Link)`\r\ntext-decoration: none;\r\ncolor: inherit;\r\npadding: 5px 10px;\r\nmargin-left: 5px;\r\ndisplay: inline-block;\r\ntransition: background-color 0.3s ease-in-out;\r\n\r\nfont-size: 13px; /* 글자 크기 지정 */\r\nfont-weight: 400; /* 글자 두께 지정 */\r\n\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  left: -500px;\r\n  margin-top:40px;\r\n`;\r\n\r\nconst DropdownContainer = styled.div`\r\n  position: absolute;\r\n  top:30px;\r\n  left: calc(50% - 600px); /* 중간에서 왼쪽으로 이동 */\r\n`;\r\n\r\nconst Dropdown = styled.div`\r\n  border: 3px solid #ccc;\r\n  border-radius: 20px;\r\n  padding: 8px;\r\n  cursor: pointer;\r\n  width: 100px;\r\n  text-align: center;\r\n`;\r\n\r\nconst DropdownMenu = styled.div`\r\n  display: ${(props) => (props.isOpen ? 'block' : 'none')};\r\n  position: absolute;\r\n  background-color: #fff;\r\n  border: 3px solid #ccc;\r\n  border-radius: 10px;\r\n  width: 100px;\r\n  max-height: 200px; /* 최대 높이 설정 */\r\n  overflow-y: auto; /* 세로 스크롤이 필요한 경우 스크롤 표시 */\r\n  z-index: 1;\r\n`;\r\n\r\nconst DropdownItem = styled.div`\r\n  padding: 5px;\r\n  cursor: pointer;\r\n`;\r\n\r\n//partyall-list container\r\nconst Container = styled.div`\r\n  position: relative;\r\n  height: 70vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst RoundedBox = styled.div`\r\n  border-radius: 80px;\r\n  border: 3px solid #ccc;\r\n  padding: 10px;\r\n  margin-right: 40px;\r\n  margin-top:100px;\r\n  width: 270px;\r\n  height: 350px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst RoundedBox1 = styled.div`\r\n  border-radius: 80px;\r\n  border:none\r\n  padding: 10px;\r\n  margin-bottom:10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin:px;\r\n  width:70px;\r\n  height:30px;\r\n  display:flex;\r\n  background-color:#E3E3E3\r\n`;\r\n\r\nconst HorizontalLine = styled.hr`\r\n    width: 90%;\r\n  height: 2px;\r\n  background-color:black;\r\n  margin:0px;\r\n`;\r\n\r\nconst PaginationContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: auto; /* 페이지네이션을 컨테이너의 아래로 밀어냅니다. */\r\n  margin-bottom: 20px; \r\n`;\r\nconst FestName = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: auto; /* 아래로 밀어냅니다. */\r\n  margin-bottom: 20px; \r\n`;\r\nconst FestEnd = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: auto; /* 아래로 밀어냅니다. */\r\n  margin-bottom: 20px; \r\n`;\r\nconst PartyDetail = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: auto; /* 아래로 밀어냅니다. */\r\n  margin-bottom: 20px; \r\n`;\r\n\r\n\r\nconst Mypartylist= () => {\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    const [selectedParty, setSelectedParty] = useState(null);\r\n\r\n \r\n    const [partiesData, setPartiesData] = useState([]);\r\n\r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        try {\r\n          const response = await fetch('https://port-0-server-cloudtype-4fju66f2clmyxbee6.sel5.cloudtype.app/party', {\r\n            method: 'GET',\r\n            headers: {\r\n              'Content-Type': 'application/json', // 요청 헤더에 JSON 형식 지정\r\n            },\r\n            credentials: 'include', // 쿠키를 전달하기 위해 필요한 옵션\r\n          });\r\n  \r\n          if (!response.ok) {\r\n            throw new Error('서버 응답이 실패했습니다.');\r\n          }\r\n  \r\n          const data = await response.json();\r\n          setPartiesData(data); // 서버에서 받은 데이터로 partiesData 상태 업데이트\r\n        } catch (error) {\r\n          console.error('파티 목록을 불러오는데 실패했습니다:', error);\r\n        }\r\n      };\r\n  \r\n      fetchData();\r\n    }, []);\r\n    \r\n      //파티팝업창\r\n      const handlePartyClick = (party) => {\r\n        setSelectedParty(party);\r\n        setShowPopup(true);\r\n      };\r\n    \r\n      const closePopup = () => {\r\n        setShowPopup(false);\r\n      };\r\n    \r\n\r\n      //페이지네이션 기능\r\n      const partiesPerPage = 4;\r\n      const [currentPage, setCurrentPage] = useState(1);\r\n    \r\n      const indexOfLastParty = currentPage * partiesPerPage;\r\n      const indexOfFirstParty = indexOfLastParty - partiesPerPage;\r\n      const currentParties = partiesData.slice(indexOfFirstParty, indexOfLastParty);\r\n    \r\n      const handlePageChange = (pageNumber) => {\r\n        setCurrentPage(pageNumber);\r\n      };\r\n    \r\n      const handlePrevPage = () => {\r\n        if (currentPage > 1) {\r\n          setCurrentPage(currentPage - 1);\r\n        }\r\n      };\r\n    \r\n      const handleNextPage = () => {\r\n        const totalPages = Math.ceil(partiesData.length / partiesPerPage);\r\n        if (currentPage < totalPages) {\r\n          setCurrentPage(currentPage + 1);\r\n        }\r\n      };\r\n\r\n\r\n      \r\n      // 드롭다운 기능\r\n      const [isOpen, setIsOpen] = useState(false);\r\n      const [selectedLocation, setSelectedLocation] = useState('전체');\r\n    \r\n      const locations = ['전체','남구', '수영구', '부산진구', '동래구','북구','금정구','연제구','사상구','강서구','서구','동구','중구','사하구','영도구','해운대구','기장군'];\r\n    \r\n      const handleToggleDropdown = () => {\r\n        setIsOpen(!isOpen);\r\n      };\r\n    \r\n      const handleLocationSelect = (location) => {\r\n        setSelectedLocation(location);\r\n        setIsOpen(false);\r\n      };\r\n\r\n      //선택한 지역구에 따라 파티 필터링\r\n\r\n    const filteredParties = selectedLocation !== '전체' \r\n    ? partiesData.filter(party => party.festAddress === selectedLocation) \r\n    : partiesData;\r\n    return (\r\n    <div>\r\n\r\n        <div>\r\n            <Linkdiv>\r\n                <StyledButton>로그아웃</StyledButton>\r\n                </Linkdiv>\r\n            <Header>\r\n            <Link to=\"/.\"> {/* 메인화면으로 이동 */}\r\n                <Logoimg src=\"info.png\" alt=\"Logo\" />\r\n            </Link>\r\n                <Headerlist>\r\n                \r\n                <MyLink to =\"/festival-list\">축제 목록</MyLink>\r\n                <MyLink to =\"/partyall-list\">전체 파티 목록</MyLink>\r\n                <MyLink to =\"/my-party-list\">내 파티</MyLink>\r\n                </Headerlist>\r\n            </Header>\r\n        <Title>전체 파티 목록</Title>\r\n\r\n        <Container>\r\n\r\n        <DropdownContainer>\r\n                <Dropdown onClick={handleToggleDropdown}>\r\n                {selectedLocation}\r\n                <DropdownMenu isOpen={isOpen}>\r\n                {locations.map((location) => (\r\n                    <DropdownItem key={location} onClick={() => handleLocationSelect(location)}>\r\n                    {location}\r\n                    </DropdownItem>\r\n                ))}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        </DropdownContainer>\r\n\r\n            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n             {filteredParties.map((party) => (\r\n             <RoundedBox key={party.partyPk} onClick={() => handlePartyClick(party)}>\r\n                    <FestName style={{fontSize:\"22px\"}}>{party.festName}</FestName>\r\n\r\n                    <RoundedBox1 >\r\n                     <p style={{margin:'0',fontSize:'15px' ,color:'#676767'}}>{party.festAddress}</p>\r\n                    </RoundedBox1>\r\n\r\n                    <HorizontalLine />\r\n                    \r\n                    <p style={{fontSize:\"20px\"}}>\r\n                        {party.partyName}</p>\r\n                    <PartyDetail>{party.partyDetail}</PartyDetail>\r\n                    <FestEnd style={{color:'#676767'}}>{party.festEnd}</FestEnd>\r\n\r\n            </RoundedBox>\r\n                ))}\r\n                </div>\r\n\r\n                            {showPopup && (\r\n                    <PartyPopup party={selectedParty} onClose={closePopup} />\r\n                )}\r\n\r\n                <PaginationContainer>\r\n                    <button onClick={handlePrevPage} style={{fontSize:'20px'}}>{'< '}</button>\r\n                    {Array.from({ length: Math.ceil(partiesData.length / partiesPerPage) }, (_, index) => (\r\n                    <button key={index + 1} style={{fontSize:'20px'}} onClick={() => handlePageChange(index + 1)}>\r\n                        {index + 1}\r\n                    </button>\r\n                    ))}\r\n                    <button onClick={handleNextPage} style={{fontSize:'20px'}}>{' >'}</button>\r\n                </PaginationContainer>\r\n                \r\n                </Container>\r\n            </div>\r\n    </div>\r\n    \r\n    );\r\n};\r\n\r\nexport default Mypartylist;","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\LoginForm.js",["177","178","179","180"],[],"import React, { useState } from 'react';\r\nimport { Navigate } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport qs from \"qs\";\r\n\r\n\r\n\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background-color: #488aee; /* 배경색 설정 */\r\n  padding: 20px; /* 적절한 패딩 추가 */\r\n  min-height: 95vh;\r\n`;\r\n\r\nconst LogoImage = styled.img`\r\n  width: 300px; /* 큰 로고 크기 */\r\n  height: auto;\r\n  margin-top: 0px;\r\n  margin-bottom: 0px;\r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 300px;\r\n  height: 40px;\r\n  margin-bottom: 10px;\r\n  padding: 10px;\r\n  border-radius: 200px;\r\n`;\r\n\r\nconst ImagesContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst HiImage = styled.img`\r\n  width: 250px; /* 더 큰 이미지 크기 */\r\n  height: auto;\r\n`;\r\n\r\nconst ExcitedImage = styled.img`\r\n  width: auto; /* 더 큰 이미지 크기 */\r\n  height: 150px;\r\n`;\r\nconst RoundedBox = styled.div`\r\n  border-radius: 200px;\r\n  width:700px;\r\n  padding: 70px;\r\n  background-color: #91B9F5; /* 배경색 설정 */\r\n  box-shadow: 0px 0px 15px 0px rgba(0,0,0,0.2); /* 그림자 효과 */\r\n  margin-top: 50px;\r\n`;\r\nconst LoginButton = styled.button`\r\ndisplay: block;\r\nwidth: 200px; /* 버튼이 컨테이너의 가로 길이를 가지도록 함 */\r\nbackground-color: #0066ff;\r\ncolor: white;\r\nborder: none;\r\nborder-radius: 200px;\r\npadding: 10px 20px;\r\nfont-size: 16px;\r\ncursor: pointer;\r\n`;\r\n\r\nconst SignupContainer = styled.div`\r\n  text-align: center;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst SignupLine = styled.div`\r\n  width: 100%;\r\n  border-top: 1px solid white;\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst SignupText = styled.p`\r\n  color: black;\r\n  font-size: 20px;\r\n  margin: 0;\r\n`;\r\n\r\nconst SignupButton = styled.button`\r\n  background-color: #0066ff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 200px;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n`;\r\n\r\n\r\nconst logobuife = '/info.png';\r\nconst hiImage = '/백경이(hi).png';\r\nconst excitedImage = '/뿌공이(신남).png';\r\n\r\n\r\nconst LoginForm=()=> {\r\n  const [userID, setuserID] = useState('');\r\n  const [userPW, setuserPW] = useState('');\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n\r\n      \r\n      const params = new URLSearchParams();\r\n      params.append('userID', userID);\r\n      params.append('userPW', userPW);\r\n\r\n      const requestOptions = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n \r\n        },\r\n        credentials : 'include',\r\n        body: params,\r\n      };\r\n    \r\n  \r\n\r\n      const response = await fetch('https://port-0-server-cloudtype-4fju66f2clmyxbee6.sel5.cloudtype.app/members/login', requestOptions);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('서버 응답이 실패했습니다.');\r\n      }\r\n      setLoggedIn(true);\r\n      const data = await response.text();\r\n      //userID를 확인하기 위한 alert\r\n      window.location.href = '/'; // URL 변경 // 로그인이 성공했을 때의 로직\r\n       console.log(data); // 서버에서 받은 데이터 확인\r\n      \r\n\r\n      \r\n\r\n       //로그인이 성공하면 다음페이지로 이동 \r\n    } catch (error) {\r\n      console.error('로그인 실패:', error);\r\n      alert('아이디 또는 패스워드를 확인해주세요!');\r\n      // 로그인 실패 시의 처리 로직을 추가하세요\r\n    }\r\n  };\r\n\r\n\r\n  /*const handleLogin = async()=>{\r\n    try {\r\n      const response = await axios.post('https://port-0-buife-5mk12alp6foaqx.sel5.cloudtype.app/members/login', qs.stringify({\r\n        userID: userID,\r\n        userPW: userPW,\r\n      }), {\r\n        method: 'POST',\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\t// Default\r\n        },})\r\n        console.log(response.data);\r\n    } catch (error) {\r\n      // 로그인 실패 시 에러 처리\r\n      console.error('로그인 실패:', error.message);\r\n    }\r\n    \r\n  };*/\r\n  \r\n\r\n  /*const handleLogin = async () => {\r\n    try {\r\n      const response = await axios.post('https://port-0-buife-5mk12alp6foaqx.sel5.cloudtype.app/members/login', {\r\n        userID: userID,\r\n        userPW: userPW,\r\n      });\r\n\r\n      // 서버에서 응답 처리\r\n      console.log(response.data); // 서버에서 받은 데이터 확인\r\n      // 성공적으로 로그인되었음을 처리하는 로직 추가\r\n    } catch (error) {\r\n      // 로그인 실패 시 에러 처리\r\n      console.error('로그인 실패:', error.message);\r\n    }\r\n  };*/\r\n  \r\n return (\r\n   <div className=\"App\">\r\n     <div className=\"mainpage\">\r\n       \r\n       <div className=\"mainbox\">\r\n        <Container>\r\n          <RoundedBox>\r\n          <Link to=\"/.\">\r\n            <LogoImage src={logobuife} alt=\"Buife 로고\" />\r\n          </Link>\r\n        \r\n            <InputContainer>\r\n              <Input type=\"text\" placeholder=\"이메일\" onChange={(e) => setuserID(e.target.value)}/>\r\n              <Input type=\"password\" placeholder=\"비밀번호\" onChange={(e) => setuserPW(e.target.value)}/>\r\n\r\n  \r\n            <LoginButton type=\"button\" onClick={handleLogin}\r\n            className=\"loginButton\">로그인\r\n            </LoginButton>\r\n            </InputContainer>\r\n            \r\n            <SignupLine />\r\n          \r\n            <SignupContainer>\r\n              <SignupText>아직 BUIFE 회원이 아니신가요?</SignupText>\r\n                <Link to=\"/signup2\"><SignupButton>회원가입</SignupButton></Link>\r\n                \r\n            </SignupContainer>\r\n\r\n\r\n            <ImagesContainer>\r\n            <ExcitedImage src={excitedImage} alt=\"뿌공이\" />\r\n            <HiImage src={hiImage} alt=\"백경이\" />\r\n            \r\n            </ImagesContainer>\r\n\r\n              \r\n          </RoundedBox>\r\n         </Container>\r\n       </div>\r\n     </div>\r\n   </div>\r\n );\r\n}\r\n\r\n\r\n\r\nexport default LoginForm;","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\festival-detail.js",["181","182"],[],"//축제 상세 목록 페이지 -> 1. 상세정보 2. 이용안내 3. 지도 4. 관련사진 5. 파티 모집\r\n//축제를 클릭하면 가장 먼저 보이는 메인 페이지\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n\r\n// import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport DetailInfo from './DetailInfo';\r\nimport GuideInfo from './GuideInfo';\r\nimport MapInfo from './MapInfo';\r\nimport PhotoInfo from './PhotoInfo';\r\nimport PartyInfo from './PartyInfo';\r\n\r\n\r\nconst Header = styled.header`\r\nbackground-color: #488AEE;\r\n// padding: 5px;\r\nheight: 130px;\r\ntext-align: center;\r\njustify-content: center;\r\n`;\r\n\r\nconst Logoimg = styled.img`\r\n// padding: 10px;\r\nheight: 110px;\r\ntext-align: center;\r\ndisplay: inline-block;\r\ncursor: pointer; /* 커서를 포인터로 변경하여 클릭 가능하게 함 */\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\ntext-decoration: none;\r\ncolor: inherit;\r\nbackground-color: lightGray;\r\npadding: 5px 10px;\r\nmargin-right: 15px;\r\nmargin-top: 10px;\r\nborder: none; /* 테두리 제거 */\r\nborder-radius: 13px;\r\ndisplay: inline-block;\r\ncursor: pointer;\r\ntransition: background-color 0.3s ease-in-out;\r\n\r\nfont-size: 13px; /* 글자 크기 지정 */\r\nfont-weight: 400; /* 글자 두께 지정 */\r\n`;\r\n\r\nconst Linkdiv = styled.div`\r\nbackground-color: #488AEE;\r\ntext-decoration: none;\r\ncolor: inherit;\r\ntext-align: right;\r\ntransition: background-color 0.3s ease-in-out;\r\n`;\r\n\r\nconst MyLink = styled(Link)`\r\ntext-decoration: none;\r\ncolor: inherit;\r\npadding: 5px 10px;\r\nmargin-left: 5px;\r\ndisplay: inline-block;\r\ntransition: background-color 0.3s ease-in-out;\r\n\r\nfont-size: 13px; /* 글자 크기 지정 */\r\nfont-weight: 400; /* 글자 두께 지정 */\r\n\r\n`;\r\n\r\nconst Headerlist = styled.div`\r\nbackground-color: #488AEE;\r\ntext-align: right;\r\npadding-bottom: 5px;\r\npadding-right: 10px;\r\n`;\r\n\r\n\r\nconst Nevigatordiv = styled.div`\r\nmargin-top: 20px;\r\nmargin-bottom: 20px;\r\ndisplay: flex;\r\njustify-content: center;\r\n`\r\n{/*버튼 요소 가운데 정렬 text-align*/}\r\nconst Listdiv1 = styled.div` \r\n    width: 100%;\r\n    height: 100%;\r\n    padding-bottom: 5px;\r\n    text-align: center; \r\n    border-bottom: 2px solid Black;\r\n`\r\nconst Listdiv2 = styled.div` \r\n    width: 100%;\r\n    height: 100%;\r\n    padding-bottom: 5px;\r\n    text-align: center;\r\n    border-bottom: 2px solid Black;\r\n`\r\nconst Listdiv3 = styled.div` \r\n    width: 100%;\r\n    height: 100%;\r\n    padding-bottom: 5px;\r\n    text-align: center;\r\n    border-bottom: 2px solid Black;\r\n`\r\nconst Listdiv4 = styled.div` \r\n    width: 100%;\r\n    height: 100%;\r\n    padding-bottom: 5px;\r\n    text-align: center;\r\n    border-bottom: 2px solid Black;\r\n`\r\nconst Listdiv5 = styled.div` \r\n    width: 100%;\r\n    height: 100%;\r\n    padding-bottom: 5px;\r\n    text-align: center;\r\n    border-bottom: 2px solid Black;\r\n\r\n`\r\n\r\n\r\nconst FestivalDetail = () => {\r\n    const [activeTab, setActiveTab] = useState('detail'); // 기본 탭은 'detail'\r\n    const festData = {\r\n        image: 'star.jpg',\r\n        description: '2023 부산 광안리 불꽃 축제에 오신 것을 환영합니다!',\r\n        phone: '051-607-6362',\r\n        address: '부산광역시 남구 대연동',\r\n        start: '2023-10-25',\r\n        end: '2023-10-30',\r\n        time: '연중무휴',\r\n        place: '광안리 해수욕장',\r\n        fee: '무료',\r\n        //detailIamge: 'star.jpg',\r\n        //관련 사진 명세??\r\n        // 백에서 가져오기\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Linkdiv>\r\n            <StyledButton>로그아웃</StyledButton>\r\n            </Linkdiv>\r\n        <Header>\r\n        <Link to=\"/.\"> {/* 메인화면으로 이동 */}\r\n            <Logoimg src=\"info.png\" alt=\"Logo\" />\r\n        </Link>\r\n            <Headerlist>\r\n            \r\n            <MyLink to =\"/festival-list\">축제 목록</MyLink>\r\n            <MyLink to =\"/partyall-list\">전체 파티 목록</MyLink>\r\n            <MyLink to =\"/my-party-list\">내 파티</MyLink>\r\n            </Headerlist>\r\n        </Header>\r\n\r\n        <Nevigatordiv>\r\n                <Listdiv1 style={{borderBlockEndColor: activeTab === 'detail' ? '#488AEE' : 'black', color: activeTab === 'detail' ? '#488AEE' : 'black'}}><button style={{Color: activeTab === 'detail' ? '#488AEE' : 'black', color: activeTab === 'detail' ? '#488AEE' : 'black'}} onClick={() => setActiveTab('detail')}>상세 정보</button></Listdiv1>\r\n                <Listdiv2 style={{borderBlockEndColor: activeTab === 'guide' ? '#488AEE' : 'black', color: activeTab === 'guide' ? '#488AEE' : 'black'}}><button style={{Color: activeTab === 'guide' ? '#488AEE' : 'black', color: activeTab === 'guide' ? '#488AEE' : 'black'}} onClick={() => setActiveTab('guide')}>이용 안내 </button></Listdiv2>\r\n                <Listdiv3 style={{borderBlockEndColor: activeTab === 'map' ? '#488AEE' : 'black', color: activeTab === 'map' ? '#488AEE' : 'black'}}><button style={{Color: activeTab === 'map' ? '#488AEE' : 'black', color: activeTab === 'map' ? '#488AEE' : 'black'}} onClick={() => setActiveTab('map')}>지도</button></Listdiv3>\r\n                <Listdiv4 style={{borderBlockEndColor: activeTab === 'photo' ? '#488AEE' : 'black', color: activeTab === 'photo' ? '#488AEE' : 'black'}}><button style={{Color: activeTab === 'photo' ? '#488AEE' : 'black', color: activeTab === 'photo' ? '#488AEE' : 'black'}} onClick={() => setActiveTab('photo')}>관련 사진</button></Listdiv4>\r\n                <Listdiv5 style={{borderBlockEndColor: activeTab === 'party' ? '#488AEE' : 'black', color: activeTab === 'party' ? '#488AEE' : 'black'}}><button style={{Color: activeTab === 'party' ? '#488AEE' : 'black', color: activeTab === 'party' ? '#488AEE' : 'black'}} onClick={() => setActiveTab('party')}>파티 모집</button></Listdiv5>\r\n        </Nevigatordiv>\r\n        <div>\r\n            {activeTab === 'detail' && <DetailInfo festData={festData}/>}\r\n            {activeTab === 'guide' && <GuideInfo festData={festData}/>}\r\n            {activeTab === 'map' && <MapInfo />}\r\n            {activeTab === 'photo' && <PhotoInfo festData={festData}/>}\r\n            {activeTab === 'party' && <PartyInfo />}\r\n\r\n        </div>\r\n\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n    export default FestivalDetail;","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\Maptest.js",["183","184","185"],[],"/* global kakao */\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst { kakao } = window;\r\n\r\nconst MapTest = () => {\r\n    const [map, setMap] = useState(null);\r\n    const [userMarker, setUserMarker] = useState(null);\r\n\r\n    // ó�� ���� �׸���\r\n    useEffect(() => {\r\n    const container = document.getElementById('map');\r\n    const options = { center: new kakao.maps.LatLng(33.450701, 126.570667) };\r\n    const kakaoMap = new kakao.maps.Map(container, options);\r\n    setMap(kakaoMap);\r\n\r\n    // ������� ���� ��ġ�� ������ ���� �߾����� �̵�\r\n    if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n        const lat = position.coords.latitude;\r\n        const lng = position.coords.longitude;\r\n        const userPosition = new kakao.maps.LatLng(lat, lng);\r\n        kakaoMap.panTo(userPosition);\r\n\r\n        // ������� ���� ��ġ�� Marker ǥ��\r\n        const marker = new kakao.maps.Marker({\r\n            position: userPosition,\r\n            map: kakaoMap,\r\n            icon: new kakao.maps.MarkerImage(\r\n            'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png',\r\n            new kakao.maps.Size(32, 32),\r\n            {\r\n                offset: new kakao.maps.Point(16, 32),\r\n            }\r\n            ),\r\n        });\r\n        setUserMarker(marker);\r\n        });\r\n    }\r\n    }, []);\r\n\r\n    return (\r\n    <div\r\n        style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginLeft: '5px',\r\n        marginRight: '5px',\r\n        marginTop: '10px',\r\n        marginBottom: '20px',\r\n        }}\r\n    >\r\n        <div id=\"map\" style={{ width: '60%', height: '500px' }}></div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default MapTest;\r\n","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\mypage-info.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\Listpage.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\PasswordChange.js",["186"],[],"import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n    const PasswordChangeContainer = styled.div`\r\n    text-align: center;\r\n    padding-top: 10px;\r\n    padding-bottom:20px;\r\n    `;\r\n\r\n    const PasswordInputContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    `;\r\n\r\n    const PasswordInput = styled.input`\r\n    margin-bottom: 10px;\r\n    padding: 5px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n    width: 15%;\r\n    `;\r\n\r\n    const ShowPasswordIcon = styled.span`\r\n    position: relative;\r\n    top: -36.5px;\r\n    left: 120px;\r\n    cursor: pointer;\r\n    font-size: 18px;\r\n    color: #777;\r\n    transition: color 0.3s;\r\n\r\n    &:hover {\r\n    color: #488AEE;\r\n    }\r\n    `;\r\n\r\n    const RequirementText = styled.p`\r\n    font-size: 12px;\r\n    color: #777;\r\n    `;\r\n\r\n    const SubmitButton = styled.button`\r\n    background-color: #488AEE;\r\n    color: #fff;\r\n    border: none;\r\n    padding: 10px 20px;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    `;\r\n\r\n    const PasswordChange = () => {\r\n    const [password, setPassword] = useState('');\r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [confirmNewPassword, setConfirmNewPassword] = useState('');\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const handleSubmit = () => {\r\n    // 등록 버튼을 눌렀을 때 처리하는 로직 추가\r\n    alert('수정되었습니다.');\r\n    };\r\n    // const [userDataArray, setUserDataArray] = useState([]);\r\n\r\n    //     useEffect(() => {\r\n    //     const fetchData = () => {\r\n    //         fetch('https://cors-anywhere.herokuapp.com/https://port-0-buife-5mk12alp6foaqx.sel5.cloudtype.app/members')\r\n    //         .then(response => {\r\n    //             if (!response.ok) {\r\n    //             throw new Error('Network response was not ok');\r\n    //             }\r\n    //             return response.json();\r\n    //         })\r\n    //         .then(data => {\r\n    //             console.log(`받아온 데이터:`, data); //정상 동작 확인 완료\r\n    //             setUserDataArray(data); // 전체 데이터 배열을 가져옴\r\n    //         })\r\n    //         .catch(error => {\r\n    //             console.error('Error fetching user data:', error);\r\n    //         });\r\n    //     };\r\n\r\n    //     fetchData();\r\n    //     }, []);\r\n\r\n    return (\r\n    <PasswordChangeContainer>\r\n        <h2>비밀번호 변경</h2>\r\n        <PasswordInputContainer>\r\n        <PasswordInput\r\n            type={showPassword ? 'text' : 'password'}\r\n            placeholder=\"현재 비밀번호\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <ShowPasswordIcon onClick={() => setShowPassword(!showPassword)}>\r\n            {showPassword ? '🙈' : '👁️'}\r\n        </ShowPasswordIcon>\r\n        </PasswordInputContainer>\r\n        <PasswordInputContainer>\r\n        <PasswordInput\r\n            type={showPassword ? 'text' : 'password'}\r\n            placeholder=\"새 비밀번호\"\r\n            value={newPassword}\r\n            onChange={(e) => setNewPassword(e.target.value)}\r\n        />\r\n        <ShowPasswordIcon onClick={() => setShowPassword(!showPassword)}>\r\n            {showPassword ? '🙈' : '👁️'}\r\n        </ShowPasswordIcon>\r\n        </PasswordInputContainer>\r\n        <PasswordInputContainer>\r\n        <PasswordInput\r\n            type={showPassword ? 'text' : 'password'}\r\n            placeholder=\"새 비밀번호 확인\"\r\n            value={confirmNewPassword}\r\n            onChange={(e) => setConfirmNewPassword(e.target.value)}\r\n        />\r\n        <ShowPasswordIcon onClick={() => setShowPassword(!showPassword)}>\r\n            {showPassword ? '🙈' : '👁️'}\r\n        </ShowPasswordIcon>\r\n        </PasswordInputContainer>\r\n        <RequirementText>\r\n        * 비밀번호 요건: 8자 이상, 대문자, 숫자, 특수문자를 포함해야 합니다.\r\n        </RequirementText>\r\n        <SubmitButton onClick={handleSubmit}>등록</SubmitButton>\r\n    </PasswordChangeContainer>\r\n    );\r\n    };\r\n\r\nexport default PasswordChange;\r\n\r\n//서버의 로직 연동해서 수정\r\n\r\n// // ... (이전 코드 부분은 변경되지 않음)\r\n\r\n// const PasswordChange = () => {\r\n//     const [password, setPassword] = useState('');\r\n//     const [newPassword, setNewPassword] = useState('');\r\n//     const [confirmNewPassword, setConfirmNewPassword] = useState('');\r\n//     const [showPassword, setShowPassword] = useState(false);\r\n//     const [userDataArray, setUserDataArray] = useState([]);\r\n//     const [warningMessage, setWarningMessage] = useState('');\r\n  \r\n//     const handleSubmit = () => {\r\n//       // 등록 버튼을 눌렀을 때 처리하는 로직 추가\r\n//       // 현재 비밀번호 확인\r\n//       const currentUser = userDataArray.find(user => user.id === 1); // 예시로 사용자 ID가 1인 경우를 가정\r\n//       if (currentUser && currentUser.password === password) {\r\n//         // 현재 비밀번호가 서버에 저장된 비밀번호와 일치하는 경우\r\n//         alert('수정되었습니다.');\r\n//         setWarningMessage(''); // 경고 메시지 초기화\r\n//       } else {\r\n//         // 현재 비밀번호가 서버에 저장된 비밀번호와 일치하지 않는 경우\r\n//         setWarningMessage('현재 비밀번호가 일치하지 않습니다.');\r\n//       }\r\n//     };\r\n  \r\n//     useEffect(() => {\r\n//       const fetchData = () => {\r\n//         fetch('https://cors-anywhere.herokuapp.com/https://port-0-buife-5mk12alp6foaqx.sel5.cloudtype.app/members')\r\n//           .then(response => {\r\n//             if (!response.ok) {\r\n//               throw new Error('Network response was not ok');\r\n//             }\r\n//             return response.json();\r\n//           })\r\n//           .then(data => {\r\n//             console.log(`받아온 데이터:`, data);\r\n//             setUserDataArray(data);\r\n//           })\r\n//           .catch(error => {\r\n//             console.error('Error fetching user data:', error);\r\n//           });\r\n//       };\r\n  \r\n//       fetchData();\r\n//     }, []);\r\n  \r\n//     return (\r\n//       <PasswordChangeContainer>\r\n//         <h2>비밀번호 변경</h2>\r\n//         {warningMessage && <p style={{ color: 'red' }}>{warningMessage}</p>}\r\n//         {/* 나머지 코드는 변경되지 않음 */}\r\n//       </PasswordChangeContainer>\r\n//     );\r\n//   };\r\n  \r\n//   export default PasswordChange;\r\n  ","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\carousel.js",["187"],[],"// import React, { Component } from 'react';\r\n// import './carousel.css';\r\n// // import React, { useState, useEffect } from 'react';\r\n\r\n//     class Carousel extends Component {\r\n//     constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//         currentOffset: 0,\r\n//         windowSize: 3,\r\n//         paginationFactor: 220,\r\n//         items: [\r\n//         { name: '부산축제원정대', tag: ['광안리'], imageUrl: 'star.jpg' },\r\n//         { name: '불꽃놀이', tag: ['광안리', '밤바다', '드론쇼'], imageUrl: 'nightrace.jpg' },\r\n//         { name: '벚꽃축제', tag: ['봄', '여행'], imageUrl: 'star.jpg'},\r\n//         { name: '부산락페스티벌', tag: ['실리카겔', '유다빈밴드'], imageUrl: 'nightrace.jpg' },\r\n//         { name: '고등어축제', tag: ['Seafood', '바다'], imageUrl: 'star.jpg' },\r\n//         { name: '해운대빛축제', tag: ['해운대'], imageUrl: 'star.jpg' },\r\n//         { name: '모래축제', tag: ['모래성'], imageUrl: 'star.jpg' },\r\n//         ],\r\n//         partyItems: [\r\n//             { name: '불꽃놀이팟', tag: ['Party'], imageUrl: 'star.jpg' },\r\n//             { name: '사쿠라', tag: ['Party'], imageUrl: 'nightrace.jpg' },\r\n//             { name: '고등어먹으러가요', tag: ['Party'], imageUrl: 'star.jpg' },\r\n//             { name: '해운대갈사람', tag: ['Party'], imageUrl: 'nightrace.jpg' },\r\n//             { name: '모래놀이합시당', tag: ['Party'], imageUrl: 'star.jpg' },\r\n//             { name: '불꽃축제 보러 가요', tag: ['Party'], imageUrl: 'nightrace.jpg' },\r\n//             { name: '벚꽃축제팟', tag: ['Party'], imageUrl: 'star.jpg' },\r\n        \r\n//         ],\r\n//         isPartyMode: false, \r\n//         isFestivalMode: false, \r\n//     };\r\n//     }\r\n//     togglePartyMode = () => {\r\n//         this.setState((prevState) => ({\r\n//             isPartyMode: !prevState.isPartyMode,\r\n//             isFestivalMode: false,\r\n//         }));\r\n//     };\r\n//     toggleFestivalMode = () => {\r\n//         this.setState((prevState) => ({\r\n//         isFestivalMode: !prevState.isFestivalMode,\r\n//         isPartyMode: false, // \"축제\" 모드로 전환할 때 \"파티\" 모드 비활성화\r\n//     }));\r\n//     };\r\n\r\n//     atEndOfList = () => {\r\n//     return (\r\n//         this.state.currentOffset <=\r\n//         (this.state.paginationFactor * -1) *\r\n//         (this.state.items.length - this.state.windowSize)\r\n//     );\r\n//     };\r\n\r\n//     atHeadOfList = () => {\r\n//     return this.state.currentOffset === 0;\r\n//     };\r\n\r\n//     moveCarousel = (direction) => {\r\n//     if (direction === 1 && !this.atEndOfList()) {\r\n//         this.setState((prevState) => ({\r\n//         currentOffset: prevState.currentOffset - prevState.paginationFactor,\r\n//         }));\r\n//     } else if (direction === -1 && !this.atHeadOfList()) {\r\n//         this.setState((prevState) => ({\r\n//         currentOffset: prevState.currentOffset + prevState.paginationFactor,\r\n//         }));\r\n//     }\r\n//     };\r\n\r\n//     render() {\r\n//     const { isPartyMode, isFestivalMode } = this.state;\r\n//     //const itemsToDisplay = isPartyMode ? this.state.partyItems : this.state.items;     \r\n//     let itemsToDisplay = this.state.items;\r\n\r\n//     if (isPartyMode) {\r\n//         itemsToDisplay = this.state.partyItems;\r\n//     } else if (isFestivalMode) {\r\n//         itemsToDisplay = this.state.items;\r\n//     }         \r\n\r\n//     const customArrowStyles = {\r\n//         arrow: {\r\n//         fontSize: '24px', \r\n//         },\r\n//     };\r\n\r\n//     return (\r\n        \r\n//         <div className=\"card-carousel-wrapper\">\r\n//             <div className=\"toggle-buttons\">\r\n//             <button id='festival-button'onClick={this.toggleFestivalMode}>축제</button>\r\n//             <button id='party-button'onClick={this.togglePartyMode}> 파티</button>\r\n//             </div>\r\n\r\n//         <button\r\n//             className={`card-carousel--nav__left ${\r\n//             this.atHeadOfList() ? 'disabled' : ''\r\n//             }`}\r\n//             onClick={() => this.moveCarousel(-1)}\r\n//             disabled={this.atHeadOfList()}\r\n//             style={customArrowStyles.arrow} \r\n//         >\r\n            \r\n//         </button>\r\n        \r\n//         <div className=\"card-carousel\">\r\n//             <div className=\"card-carousel--overflow-container\">\r\n//             <div\r\n//                 className=\"card-carousel-cards\"\r\n//                 style={{\r\n//                 transform: `translateX(${this.state.currentOffset}px)`,\r\n//                 }}\r\n//             >\r\n//                 {/* 축제 메인 포스터 표시하는 부분 */}\r\n//                 {itemsToDisplay.map((item, index) => (\r\n//                 <div className=\"card-carousel--card\" key={index}>\r\n//                     <img src={item.imageUrl} alt={`Image ${index+1}`} />\r\n\r\n//                     {/* 축제 이름과 태그를 표시하는 부분 */}\r\n//                     <div className=\"card-carousel--card--footer\">\r\n//                     <p>{item.name}</p>\r\n//                     {item.tag.map((tag, tagIndex) => (\r\n//                         <p\r\n//                         className={`tag ${tagIndex > 0 ? 'secondary' : ''}`}\r\n//                         key={tagIndex}\r\n//                         >\r\n//                         {tag}\r\n//                         </p>\r\n//                     ))}\r\n//                     </div>\r\n//                 </div>\r\n//                 ))}\r\n//             </div>\r\n//             </div>\r\n//         </div>\r\n//         <button\r\n//             className={`card-carousel--nav__right ${\r\n//             this.atEndOfList() ? 'disabled' : ''\r\n//             }`}\r\n//             onClick={() => this.moveCarousel(1)}\r\n//             disabled={this.atEndOfList()}\r\n//             style={customArrowStyles.arrow} \r\n//         >\r\n//         </button>\r\n//         </div>\r\n//     );\r\n//     }\r\n//     }\r\n\r\n//     export default Carousel;\r\n\r\n\r\n\r\n// import React, { Component } from 'react';\r\n// import './carousel.css';\r\n\r\n// class Carousel extends Component {\r\n// constructor(props) {\r\n// super(props);\r\n// this.state = {\r\n// currentOffset: 0,\r\n// windowSize: 3,\r\n// paginationFactor: 220,\r\n// items: [],\r\n// partyItems: [],\r\n// isPartyMode: false,\r\n// isFestivalMode: false,\r\n// };\r\n// }\r\n\r\n// componentDidMount() {\r\n// this.fetchData('https://cors-anywhere.herokuapp.com/https://port-0-buife-5mk12alp6foaqx.sel5.cloudtype.app/festival/popular', 'items');\r\n// this.fetchData('https://cors-anywhere.herokuapp.com/https://port-0-buife-5mk12alp6foaqx.sel5.cloudtype.app/festival/popular', 'partyItems');\r\n// }\r\n\r\n// fetchData = (url, type) => {\r\n// fetch(url, {\r\n//     headers: {\r\n//     'Accept': 'application/json',\r\n//     },\r\n// })\r\n//     .then(response => response.json())\r\n//     .then(data => {\r\n//     console.log(`받아온 데이터 (${type}):`, data); //정상 동작 확인 완료\r\n//     this.setState({\r\n//         [type]: data,\r\n//     });\r\n//     })\r\n//     .catch(error => console.error('데이터를 불러오는 중 에러 발생:', error));\r\n// };\r\n\r\n// togglePartyMode = () => {\r\n// this.setState((prevState) => ({\r\n// isPartyMode: !prevState.isPartyMode,\r\n// isFestivalMode: false,\r\n// }));\r\n// };\r\n\r\n// toggleFestivalMode = () => {\r\n// this.setState((prevState) => ({\r\n// isFestivalMode: !prevState.isFestivalMode,\r\n// isPartyMode: false,\r\n// }));\r\n// };\r\n\r\n// atEndOfList = () => {\r\n// return (\r\n//     this.state.currentOffset <=\r\n//     (this.state.paginationFactor * -1) *\r\n//     (this.state.items.length - this.state.windowSize)\r\n// );\r\n// };\r\n\r\n// atHeadOfList = () => {\r\n// return this.state.currentOffset === 0;\r\n// };\r\n\r\n// moveCarousel = (direction) => {\r\n// if (direction === 1 && !this.atEndOfList()) {\r\n//     this.setState((prevState) => ({\r\n//     currentOffset: prevState.currentOffset - prevState.paginationFactor,\r\n//     }));\r\n// } else if (direction === -1 && !this.atHeadOfList()) {\r\n//     this.setState((prevState) => ({\r\n//     currentOffset: prevState.currentOffset + prevState.paginationFactor,\r\n//     }));\r\n// }\r\n// };\r\n\r\n// render() {\r\n// const { isPartyMode, isFestivalMode } = this.state;\r\n// let itemsToDisplay = this.state.items;\r\n\r\n// if (isPartyMode) {\r\n// itemsToDisplay = this.state.partyItems;\r\n// } else if (isFestivalMode) {\r\n// itemsToDisplay = this.state.items;\r\n// }\r\n\r\n// const customArrowStyles = {\r\n// arrow: {\r\n//     fontSize: '24px',\r\n// },\r\n// };\r\n\r\n// return (\r\n// <div className=\"card-carousel-wrapper\">\r\n//     {/* ... (나머지 코드는 변경되지 않음) */}\r\n//     <div className=\"toggle-buttons\">\r\n//         <button id='festival-button'onClick={this.toggleFestivalMode}>축제</button>\r\n//         <button id='party-button'onClick={this.togglePartyMode}> 파티</button>\r\n//         </div>\r\n\r\n//     <button\r\n//         className={`card-carousel--nav__left ${\r\n//         this.atHeadOfList() ? 'disabled' : ''\r\n//         }`}\r\n//         onClick={() => this.moveCarousel(-1)}\r\n//         disabled={this.atHeadOfList()}\r\n//         style={customArrowStyles.arrow} \r\n//     >\r\n        \r\n//     </button>\r\n    \r\n//     <div className=\"card-carousel\">\r\n//         <div className=\"card-carousel--overflow-container\">\r\n//         <div\r\n//             className=\"card-carousel-cards\"\r\n//             style={{\r\n//             transform: `translateX(${this.state.currentOffset}px)`,\r\n//             }}\r\n//         >\r\n//             {/* 축제 메인 포스터 표시하는 부분 */}\r\n//             {itemsToDisplay.map((item, index) => (\r\n//             <div className=\"card-carousel--card\" key={index}>\r\n//                 <img src={item.image || 'mannerReview.png'} alt={`Image ${index+1}`} />\r\n\r\n//                 {/* 축제 이름과 태그를 표시하는 부분 */}\r\n//                 <div className=\"card-carousel--card--footer\">\r\n//                 <p>{item.name}</p>\r\n//                 <p className=\"tag secondary\">Start: {item.start}</p>\r\n//         {/* <p className=\"tag secondary\">End: {item.end}</p> */}\r\n//                 {/* {item.tag.map((tag, tagIndex) => (\r\n//                     <p\r\n//                     className={`tag ${tagIndex > 0 ? 'secondary' : ''}`}\r\n//                     key={tagIndex}\r\n//                     >\r\n//                     {tag}\r\n//                     </p>\r\n//                 ))} */}\r\n//                 </div>\r\n//             </div>\r\n//             ))}\r\n//         </div>\r\n//         </div>\r\n//     </div>\r\n//     <button\r\n//         className={`card-carousel--nav__right ${\r\n//         this.atEndOfList() ? 'disabled' : ''\r\n//         }`}\r\n//         onClick={() => this.moveCarousel(1)}\r\n//         disabled={this.atEndOfList()}\r\n//         style={customArrowStyles.arrow} \r\n//     >\r\n//     </button>\r\n// </div>\r\n// );\r\n// }\r\n// }\r\n\r\n// export default Carousel;\r\n\r\nimport React, { Component } from 'react';\r\nimport './carousel.css';\r\n\r\nclass Carousel extends Component {\r\nconstructor(props) {\r\nsuper(props);\r\nthis.state = {\r\ncurrentOffset: 0,\r\nwindowSize: 3,\r\npaginationFactor: 220,\r\nitems: [],\r\n\r\n};\r\n}\r\n\r\ncomponentDidMount() {\r\nthis.fetchData('https://port-0-server-cloudtype-4fju66f2clmyxbee6.sel5.cloudtype.app/festival/popular', 'items');\r\n}\r\n\r\nfetchData = (url, type) => {\r\nfetch(url, {\r\n    headers: {\r\n    'Accept': 'application/json',\r\n    },\r\n})\r\n    .then(response => response.json())\r\n    .then(data => {\r\n    console.log(`받아온 데이터 (${type}):`, data); //정상 동작 확인 완료\r\n    this.setState({\r\n        [type]: data,\r\n    });\r\n    })\r\n    .catch(error => console.error('데이터를 불러오는 중 에러 발생:', error));\r\n};\r\n\r\n\r\natEndOfList = () => {\r\nreturn (\r\n    this.state.currentOffset <=\r\n    (this.state.paginationFactor * -1) *\r\n    (this.state.items.length - this.state.windowSize)\r\n);\r\n};\r\n\r\natHeadOfList = () => {\r\nreturn this.state.currentOffset === 0;\r\n};\r\n\r\nmoveCarousel = (direction) => {\r\nif (direction === 1 && !this.atEndOfList()) {\r\n    this.setState((prevState) => ({\r\n    currentOffset: prevState.currentOffset - prevState.paginationFactor,\r\n    }));\r\n} else if (direction === -1 && !this.atHeadOfList()) {\r\n    this.setState((prevState) => ({\r\n    currentOffset: prevState.currentOffset + prevState.paginationFactor,\r\n    }));\r\n}\r\n};\r\n\r\nrender() {\r\nlet itemsToDisplay = this.state.items;\r\n\r\n\r\nconst customArrowStyles = {\r\narrow: {\r\n    fontSize: '24px',\r\n},\r\n};\r\n\r\nreturn (\r\n<div className=\"card-carousel-wrapper\">\r\n\r\n    <button\r\n        className={`card-carousel--nav__left ${\r\n        this.atHeadOfList() ? 'disabled' : ''\r\n        }`}\r\n        onClick={() => this.moveCarousel(-1)}\r\n        disabled={this.atHeadOfList()}\r\n        style={customArrowStyles.arrow} \r\n    >\r\n        \r\n    </button>\r\n    \r\n    <div className=\"card-carousel\">\r\n        <div className=\"card-carousel--overflow-container\">\r\n        <div\r\n            className=\"card-carousel-cards\"\r\n            style={{\r\n            transform: `translateX(${this.state.currentOffset}px)`,\r\n            }}\r\n        >\r\n            {/* 축제 메인 포스터 표시하는 부분 */}\r\n            {itemsToDisplay.map((item, index) => (\r\n            <div className=\"card-carousel--card\" key={index}>\r\n                <img src={item.image || 'mannerReview.png'} alt={`Image ${index+1}`} />\r\n\r\n                {/* 축제 이름과 태그를 표시하는 부분 */}\r\n                <div className=\"card-carousel--card--footer\">\r\n                <p className=\"fest-name\">{item.name}</p>\r\n                <p className=\"tag secondary\">{item.start} ~ {item.end}</p>\r\n                </div>\r\n            </div>\r\n            ))}\r\n        </div>\r\n        </div>\r\n    </div>\r\n    <button\r\n        className={`card-carousel--nav__right ${\r\n        this.atEndOfList() ? 'disabled' : ''\r\n        }`}\r\n        onClick={() => this.moveCarousel(1)}\r\n        disabled={this.atEndOfList()}\r\n        style={customArrowStyles.arrow} \r\n    >\r\n    </button>\r\n</div>\r\n);\r\n}\r\n}\r\n\r\nexport default Carousel;","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\reviewImage.js",["188"],[],"import React, { useState } from 'react';\r\nimport './ReviewImage.css'; // 스타일을 정의한 CSS 파일을 import\r\n\r\nconst Image = ({ index, onClick }) => {\r\nconst [isSelected, setIsSelected] = useState(false);\r\n\r\nconst handleImageClick = () => {\r\nsetIsSelected(!isSelected);\r\nonClick(index, !isSelected); // isSelected 값을 부모 컴포넌트로 전달\r\n};\r\n\r\nreturn (\r\n<div\r\n    className={`image ${isSelected ? 'selected' : ''}`}\r\n    onClick={handleImageClick}\r\n>\r\n    {/* 이미지 내용 */}\r\n    <img\r\n    src={\"mannerReview.png\"} \r\n    alt={`Image ${index}`}\r\n    />\r\n</div>\r\n);\r\n};\r\n\r\nconst ReviewImage = () => {\r\nconst [selectedImageCount, setSelectedImageCount] = useState(0);\r\n// const [selectedImageIndexes, setSelectedImageIndexes] = useState([]);\r\n\r\nconst handleImageClick = (index, isSelected) => {\r\nif (isSelected) {\r\n    // 이미지가 선택된 경우\r\n    // setSelectedImageIndexes((prevIndexes) => [...prevIndexes, index]);\r\n    setSelectedImageCount(selectedImageCount + 1);\r\n} else {\r\n    // 이미지가 선택 해제된 경우\r\n    // setSelectedImageIndexes((prevIndexes) =>\r\n    // prevIndexes.filter((prevIndex) => prevIndex !== index)\r\n    // );\r\n    setSelectedImageCount(selectedImageCount - 1);\r\n}\r\n};\r\n\r\nreturn (\r\n<div>\r\n    <div className=\"image-gallery\">\r\n    {[0, 1, 2, 3, 4].map((index) => (\r\n        <Image key={index} index={index} onClick={handleImageClick} />\r\n    ))}\r\n    </div>\r\n    <p style={{textAlign: 'center', padding: '20px'}}>별점: {selectedImageCount}점</p>\r\n    {/* <p>선택된 이미지 인덱스: {selectedImageIndexes.join(', ')}</p> */}\r\n</div>\r\n);\r\n};\r\n\r\nexport default ReviewImage;\r\n","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\FilterComponent.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\ModalStyle.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\login.js",["189","190"],[],"    import React, { Component } from 'react';\r\n    import { Link } from 'react-router-dom';\r\n    import styled from 'styled-components';\r\n    import { useNavigate } from 'react-router-dom';\r\n    \r\n    // 공통 스타일을 정의한 styled-components\r\n\r\n    const StyledDiv = styled.div`\r\n    padding-right: 15px; /* padding 추가 */\r\n    `;\r\n    const StyledButton = styled.button`\r\n    text-decoration: none;\r\n    color: inherit;\r\n    background-color: lightGray;\r\n    padding: 5px 10px;\r\n    border: none; /* 테두리 제거 */\r\n    border-radius: 13px;\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s ease-in-out;\r\n\r\n    font-size: 13px; /* 글자 크기 지정 */\r\n    font-weight: 400; /* 글자 두께 지정 */\r\n    `;\r\n\r\n    const MyLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: inherit;\r\n    background-color: lightGray;\r\n    padding: 5px 10px;\r\n    margin-left: 10px;\r\n    border-radius: 13px;\r\n    display: inline-block;\r\n    transition: background-color 0.3s ease-in-out;\r\n\r\n    font-size: 13px; /* 글자 크기 지정 */\r\n    font-weight: 400; /* 글자 두께 지정 */\r\n\r\n    `;\r\n\r\n    class Login extends Component {\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        isLoggedIn: false, // 초기 로그인 상태는 로그아웃 상태\r\n    };\r\n    }\r\n\r\n    handleLogin = () => {\r\n    // 사용자가 로그인 버튼을 클릭할 때 호출되는 함수\r\n    this.setState({\r\n        isLoggedIn: true, // 로그인 상태로 변경\r\n    });\r\n    };\r\n\r\n    handleLogout = () => {\r\n    // 사용자가 로그아웃 버튼을 클릭할 때 호출되는 함수\r\n    this.setState({\r\n        isLoggedIn: false, // 로그아웃 상태로 변경\r\n    });\r\n    };\r\n\r\n    render() {\r\n    const { isLoggedIn } = this.state;\r\n    function Login() {\r\n        const navigate = useNavigate();\r\n        \r\n        }\r\n    return (\r\n        <StyledDiv>\r\n        {isLoggedIn ? ( // isLoggedIn 상태에 따라 다른 버튼 렌더링\r\n            <div>\r\n            <StyledButton onClick={this.handleLogout}>로그아웃</StyledButton>\r\n            <MyLink to=\"/Mypage\">마이페이지</MyLink>\r\n            </div>\r\n        ) : (\r\n            <MyLink to=\"/LoginForm\">\r\n            <StyledButton onClick={this.handleLogin}>로그인</StyledButton>\r\n            </MyLink>\r\n        )}\r\n        </StyledDiv>\r\n    );\r\n    }\r\n    }\r\n\r\n    export default Login;\r\n","C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\DetailInfo.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\GuideInfo.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\DropdownComponent.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\MapInfo.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\PhotoInfo.js",[],[],"C:\\Users\\82102\\Documents\\GitHub\\WAP-2\\src\\pages\\PartyInfo.js",["191","192","193"],[],"// src/components/MapInfo.js\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useEffect } from 'react';\r\nimport ListPage from './Listpage';\r\nimport FilterComponent from './FilterComponent';\r\nimport { Link } from 'react-router-dom';\r\nimport modalStyles from './ModalStyle'; // 스타일 파일 import\r\n\r\n\r\nconst data = [\r\n    { id: 1, title: '품목 1', date: '2023-11-13' },\r\n    { id: 2, title: '품목 2', date: '2023-11-14' },\r\n    { id: 3, title: '품목 3', date: '2023-11-15' },\r\n    { id: 4, title: '품목 4', date: '2023-11-16' },\r\n    { id: 5, title: '품목 5', date: '2023-11-17' },\r\n    { id: 6, title: '품목 6', date: '2023-11-18' },\r\n    { id: 1, title: '품목 1', date: '2023-11-13' },\r\n    { id: 2, title: '품목 2', date: '2023-11-14' },\r\n    { id: 3, title: '품목 3', date: '2023-11-15' },\r\n    { id: 4, title: '품목 4', date: '2023-11-16' },\r\n    { id: 5, title: '품목 5', date: '2023-11-17' },\r\n    { id: 6, title: '품목 6', date: '2023-11-18' },\r\n    { id: 1, title: '품목 1', date: '2023-11-13' },\r\n    { id: 2, title: '품목 2', date: '2023-11-14' },\r\n    { id: 3, title: '품목 3', date: '2023-11-15' },\r\n    { id: 4, title: '품목 4', date: '2023-11-16' },\r\n    { id: 5, title: '품목 5', date: '2023-11-17' },\r\n    { id: 6, title: '품목 8', date: '2023-11-18' },\r\n  ];\r\n\r\nconst PartyInfo = () => {\r\n\r\n    \r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const itemsPerPage = 4;\r\n    const totalPages = Math.ceil(data.length / itemsPerPage);\r\n\r\n    \r\n    const handleClick = (page) => {\r\n        setCurrentPage(page);\r\n    };\r\n\r\n\r\n        const handlePrevClick = () => {\r\n            setCurrentPage((prev) => prev - 1);\r\n        };\r\n\r\n        const handleNextClick = () => {\r\n            setCurrentPage((prev) => prev + 1);\r\n        };\r\n\r\n        const startIndex = (currentPage - 1) * itemsPerPage;\r\n        const endIndex = startIndex + itemsPerPage;\r\n        const currentItems = data.slice(startIndex, endIndex);\r\n\r\n\r\n    return (\r\n    <div>\r\n        <h2 style={{display:'flex',justifyContent:'center'}}>2023 부산 광안리 불꽃 축제</h2>\r\n\r\n        <div>\r\n            <Link to=\"/make\"><button style={modalStyles.writeButton}>글쓰기</button></Link>\r\n            <FilterComponent />\r\n            <br></br>\r\n            <br></br><br></br><br></br><br></br><br></br>\r\n            <ListPage/>\r\n                <div style={{marginBottom: '20px', position: 'fixed', bottom: 0, display: 'flex', justifyContent: 'center', width: '100%' }}>\r\n                    <div style={{ display: 'flex' }}>\r\n                        <button onClick={handlePrevClick} disabled={currentPage === 1}>\r\n                            {'<'}\r\n                        </button>\r\n                        {Array.from({ length: totalPages }, (_, index) => index + 1).map(\r\n                            (page) => (\r\n                                <button\r\n                                key={page}\r\n                                onClick={() => handleClick(page)}\r\n                                disabled={page === currentPage}\r\n                                style={{ margin: '0 10px', color: page === currentPage ? '#488AEE' : 'black' }}\r\n                            >\r\n                                {page}\r\n                            </button>\r\n                            )\r\n                        )}\r\n                        <button onClick={handleNextClick} disabled={currentPage === totalPages}>\r\n                            {'>'}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    </div>\r\n    \r\n    );\r\n};\r\n\r\nexport default PartyInfo;\r\n\r\n\r\n",{"ruleId":"194","severity":1,"message":"195","line":11,"column":7,"nodeType":"196","messageId":"197","endLine":11,"endColumn":16},{"ruleId":"194","severity":1,"message":"198","line":63,"column":15,"nodeType":"196","messageId":"197","endLine":63,"endColumn":27},{"ruleId":"194","severity":1,"message":"199","line":7,"column":7,"nodeType":"196","messageId":"197","endLine":7,"endColumn":13},{"ruleId":"194","severity":1,"message":"200","line":6,"column":8,"nodeType":"196","messageId":"197","endLine":6,"endColumn":19},{"ruleId":"194","severity":1,"message":"201","line":241,"column":13,"nodeType":"196","messageId":"197","endLine":241,"endColumn":27},{"ruleId":"194","severity":1,"message":"202","line":101,"column":23,"nodeType":"196","messageId":"197","endLine":101,"endColumn":35},{"ruleId":"194","severity":1,"message":"203","line":2,"column":10,"nodeType":"196","messageId":"197","endLine":2,"endColumn":21},{"ruleId":"194","severity":1,"message":"204","line":2,"column":10,"nodeType":"196","messageId":"197","endLine":2,"endColumn":18},{"ruleId":"194","severity":1,"message":"200","line":6,"column":8,"nodeType":"196","messageId":"197","endLine":6,"endColumn":19},{"ruleId":"194","severity":1,"message":"201","line":236,"column":13,"nodeType":"196","messageId":"197","endLine":236,"endColumn":27},{"ruleId":"194","severity":1,"message":"204","line":2,"column":10,"nodeType":"196","messageId":"197","endLine":2,"endColumn":18},{"ruleId":"194","severity":1,"message":"205","line":5,"column":8,"nodeType":"196","messageId":"197","endLine":5,"endColumn":13},{"ruleId":"194","severity":1,"message":"206","line":6,"column":8,"nodeType":"196","messageId":"197","endLine":6,"endColumn":10},{"ruleId":"194","severity":1,"message":"207","line":112,"column":10,"nodeType":"196","messageId":"197","endLine":112,"endColumn":18},{"ruleId":"194","severity":1,"message":"208","line":3,"column":27,"nodeType":"196","messageId":"197","endLine":3,"endColumn":36},{"ruleId":"209","severity":1,"message":"210","line":84,"column":1,"nodeType":"211","messageId":"212","endLine":84,"endColumn":30},{"ruleId":"194","severity":1,"message":"213","line":1,"column":11,"nodeType":"214","messageId":"197","endLine":1,"endColumn":16},{"ruleId":"194","severity":1,"message":"215","line":7,"column":12,"nodeType":"196","messageId":"197","endLine":7,"endColumn":15},{"ruleId":"194","severity":1,"message":"216","line":8,"column":12,"nodeType":"196","messageId":"197","endLine":8,"endColumn":22},{"ruleId":"194","severity":1,"message":"208","line":1,"column":27,"nodeType":"196","messageId":"197","endLine":1,"endColumn":36},{"ruleId":"217","severity":1,"message":"218","line":410,"column":17,"nodeType":"219","endLine":410,"endColumn":88},{"ruleId":"217","severity":1,"message":"218","line":18,"column":5,"nodeType":"219","endLine":21,"endColumn":7},{"ruleId":"194","severity":1,"message":"220","line":65,"column":14,"nodeType":"196","messageId":"197","endLine":65,"endColumn":19},{"ruleId":"194","severity":1,"message":"221","line":66,"column":15,"nodeType":"196","messageId":"197","endLine":66,"endColumn":23},{"ruleId":"194","severity":1,"message":"222","line":4,"column":8,"nodeType":"196","messageId":"197","endLine":4,"endColumn":14},{"ruleId":"194","severity":1,"message":"208","line":5,"column":10,"nodeType":"196","messageId":"197","endLine":5,"endColumn":19},{"ruleId":"194","severity":1,"message":"198","line":57,"column":15,"nodeType":"196","messageId":"197","endLine":57,"endColumn":27},"no-unused-vars","'StyledDiv' is assigned a value but never used.","Identifier","unusedVar","'currentItems' is assigned a value but never used.","'MyLink' is assigned a value but never used.","'modalStyles' is defined but never used.","'currentParties' is assigned a value but never used.","'setPartyData' is assigned a value but never used.","'useNavigate' is defined but never used.","'Navigate' is defined but never used.","'axios' is defined but never used.","'qs' is defined but never used.","'loggedIn' is assigned a value but never used.","'useEffect' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'kakao' is defined but never used.","Program","'map' is assigned a value but never used.","'userMarker' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Login' is defined but never used.","'navigate' is assigned a value but never used.","'styled' is defined but never used."]